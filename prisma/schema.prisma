generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  pending
  approved
  rejected
}

model User {
  id             String           @id
  name           String
  username       String?
  description    String
  email          String
  emailVerified  Boolean
  image          String?
  startup        Startup[]
  tags           Tag[]
  startupRequest StartupRequest[]
  createdAt      DateTime
  updatedAt      DateTime
  sessions       Session[]
  accounts       Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Startup {
  id             String           @id
  name           String
  description    String
  websiteUrl     String?
  images         Image[]
  tags           Tag[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  creatorId      User             @relation(fields: [userId], references: [id])
  userId         String
  StartupRequest StartupRequest[]
}

model Tag {
  id      String    @id
  name    String
  startup Startup[]
  user    User[]
}

model StartupRequest {
  id        Int      @id
  message   String
  status    Status   @default(pending)
  startup   Startup  @relation(fields: [startupId], references: [id])
  startupId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String  @id
  url       String
  startup   Startup @relation(fields: [startupId], references: [id])
  startupId String
}
